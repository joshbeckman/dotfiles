[user]
	name = Josh Beckman
	email = josh@joshbeckman.org
[core]
	editor = nvim
[alias]
    ada = add -A
    add = add -v
    ali = config --get-regexp alias
    br = branch
    browse = !open $(git remote get-url origin | sed s!git@!https://! | sed s!com:!com/! | sed s!\\\\.git!!)
    browseissues = !open $(git remote get-url origin | sed s!git@!https://! | sed s!com:!com/! | sed s!\\\\.git!!)/issues
    browselines = !open $(git remote get-url origin | sed s!git@!https://! | sed s!com:!com/! | sed s!\\\\.git!!)/pipelines
    browsemerges = !open $(git remote get-url origin | sed s!git@!https://! | sed s!com:!com/! | sed s!\\\\.git!!)/merge_requests
    browsepulls = !open $(git remote get-url origin | sed s!git@!https://! | sed s!com:!com/! | sed s!\\\\.git!!)/pulls
    brs = show-branch --sha1-name
    c = commit
    ca = commit --amend
    cac = commit --amend -c
    cb = symbolic-ref --short HEAD      # get current branch name, simply
    ci = commit -a --verbose
    cm = commit -am
    co = checkout
    cp = cherry-pick
    fc = log --all --grep
    fix = "!f() { nvim -p `git diff --name-only | uniq`; }; f" # via https://gist.github.com/jacobvosmaer/3187346
    fup = push --set-upstream origin HEAD
    get = fetch --all
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    ls = ls-files
    lsv = log --pretty=format:'%C(yellow)%h %C(cyan)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=short --numstat
    lu = for-each-ref --sort=-committerdate --format='%(committerdate:relative)%09%(refname:short)' refs/heads
    prose = log --pretty=format:%s
    pu = pull origin 
    rearrange = "!git rebase -i $(git merge-base HEAD @{u})"
    rev = merge --no-ff --no-commit
    s = status -sb
    st = status
    tree = log --all --graph --decorate --oneline
    up = push origin 
    uptags = !git push origin && git push origin --tags
    web = instaweb
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    cleanonmain = !git checkout main && gt sync && git remote prune origin
    claude-commit = "!f() { \
        DIFF=$(git diff --cached); \
        if [ -z \"$DIFF\" ]; then \
            echo 'No staged changes to commit'; \
            exit 1; \
        fi; \
        CLAUDE_CMD='claude'; \
        if command -v devx >/dev/null 2>&1 && devx claude -- --version >/dev/null 2>&1; then \
            CLAUDE_CMD='devx claude --'; \
        elif ! command -v claude >/dev/null 2>&1; then \
            echo 'Neither claude nor devx claude command found'; \
            exit 1; \
        fi; \
        PROMPT=\"Generate a git commit message following Conventional Commits format for these staged changes. Respond with ONLY the commit message text (no markdown, no code blocks, no explanation).\n\nFormat:\n<type>[optional scope]: <description>\n\n<optional body with more details>\n\nRules:\n- Keep the first line (title) under 50 characters if possible\n- Include a blank line between title and body\n- In the body, explain what changed and why (not how)\n- Focus on the motivation and context for the change\n\nStaged changes:\n$DIFF\"; \
        MSG=$(echo \"$PROMPT\" | $CLAUDE_CMD --print 2>/dev/null | sed 's/^```.*//g' | sed 's/^```$//g'); \
        if [ -n \"$MSG\" ]; then \
            git commit -v -e -m \"$MSG\"; \
        else \
            echo 'Failed to generate commit message'; \
            exit 1; \
        fi; \
    }; f"
[init]
	templatedir = ~/.git-templates
[github]
	user = joshbeckman
[ghi]
	token = !security find-internet-password -a joshbeckman -s github.com -l 'ghi token' -w
[push]
	default = simple
[pull]
        rebase = false
[rerere]
	enabled = true
[gitlab]
	url = https://gitlab.com
[merge]
	tool = vimdiff
[commit]
        template = ~/.git-templates/.gitmessage
        verbose = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
